# DOCUMENTACIÓN DEL PROYECTO MALA MALE
## Desarrollo de Página Web Profesional - Guía Paso a Paso

---

**Estudiante:** Tu Nombre
**Proyecto:** Página Web MalaPeluquería
**Fecha:** 14 de Octubre, 2025
**Tipo:** Primera página web profesional

---

## ÍNDICE

1. **INTRODUCCIÓN Y OBJETIVOS**
2. **ESTRUCTURA DEL PROYECTO**
3. **DESARROLLO HTML - ESTRUCTURA**
4. **DESARROLLO CSS - ESTILOS Y DISEÑO**
5. **DESARROLLO JAVASCRIPT - FUNCIONALIDAD**
6. **INTEGRACIÓN DE SERVICIOS**
7. **OPTIMIZACIÓN Y MEJORES PRÁCTICAS**
8. **CONCLUSIONES Y APRENDIZAJES**

---

## 1. INTRODUCCIÓN Y OBJETIVOS

### ¿Qué se desarrolló?
Una página web profesional para "MalaPeluquería" con las siguientes características:
- **Sitio web multi-página** (4 páginas principales)
- **Diseño responsivo** (se adapta a móviles, tablets y escritorio)
- **Navegación intuitiva** entre secciones
- **Contenido multimedia** (imágenes y videos)
- **Diseño moderno** con efectos visuales

### Objetivos cumplidos:
✅ Crear estructura HTML semántica
✅ Implementar diseño CSS responsivo
✅ Agregar funcionalidad JavaScript
✅ Integrar página de servicios
✅ Mantener consistencia visual

---

## 2. ESTRUCTURA DEL PROYECTO

```
proyecto-MalaMale/
├── index.html          (Página principal)
├── productos.html      (Página de productos)
├── traramientos.html   (Página de tratamientos)
├── servicios.html      (Página de servicios - NUEVA)
├── css/
│   ├── index.css       (Estilos principales)
│   ├── productos.css   (Estilos específicos de productos)
│   └── servicios.css   (Estilos específicos de servicios)
└── img/
    └── [imágenes del sitio]
```

### ¿Por qué esta estructura?
- **Separación de responsabilidades**: HTML para estructura, CSS para diseño
- **Modularidad**: Cada página tiene sus estilos específicos
- **Organización**: Carpetas separadas para diferentes tipos de archivos
- **Escalabilidad**: Fácil agregar nuevas páginas o recursos

---

## 3. DESARROLLO HTML - ESTRUCTURA

### 3.1 Conceptos HTML Aplicados

#### **Etiquetas Semánticas Utilizadas:**
```html
<header>    - Encabezado de la página
<nav>       - Menú de navegación
<main>      - Contenido principal
<section>   - Secciones de contenido
<article>   - Artículos independientes
<footer>    - Pie de página
```

#### **¿Por qué usar HTML semántico?**
- **SEO**: Los motores de búsqueda entienden mejor el contenido
- **Accesibilidad**: Lectores de pantalla navegan mejor
- **Mantenimiento**: Código más claro y fácil de modificar

### 3.2 Estructura Base Implementada

#### **Plantilla HTML común para todas las páginas:**
```html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Página - MalaPeluquería</title>
    <link rel="stylesheet" href="css/index.css">
</head>
<body>
    <header>
        <nav>
            <!-- Menú de navegación -->
        </nav>
    </header>
    
    <main>
        <!-- Contenido específico de cada página -->
    </main>
    
    <footer>
        <!-- Pie de página -->
    </footer>
</body>
</html>
```

### 3.3 Cambios Realizados en la Navegación

#### **ANTES:**
```html
<nav>
    <ul>
        <li><a href="index.html">Inicio</a></li>
        <li><a href="productos.html">Productos</a></li>
        <li><a href="traramientos.html">Tratamientos</a></li>
    </ul>
</nav>
```

#### **DESPUÉS:**
```html
<nav>
    <ul>
        <li><a href="index.html">Inicio</a></li>
        <li><a href="productos.html">Productos</a></li>
        <li><a href="traramientos.html">Tratamientos</a></li>
        <li><a href="servicios.html">Servicios</a></li> <!-- NUEVO -->
    </ul>
</nav>
```

#### **¿Qué se logró?**
- **Consistencia**: Todas las páginas tienen el mismo menú
- **Navegabilidad**: El usuario puede ir a cualquier sección desde cualquier página
- **UX mejorada**: Experiencia de usuario más profesional

### 3.4 Página de Servicios - Estructura Completa

#### **Secciones implementadas:**
1. **Hero Section**: Presentación principal
2. **Grid de Servicios**: 5 servicios organizados
3. **Videos integrados**: Contenido multimedia
4. **Footer**: Información de contacto

#### **Código de ejemplo - Sección de servicio:**
```html
<section class="servicio-item">
    <div class="servicio-contenido">
        <h3>Lavado</h3>
        <p>Descripción del servicio...</p>
    </div>
    <div class="servicio-video">
        <video autoplay muted loop>
            <source src="URL_DEL_VIDEO" type="video/mp4">
        </video>
    </div>
</section>
```

---

## 4. DESARROLLO CSS - ESTILOS Y DISEÑO

### 4.1 Conceptos CSS Aplicados

#### **Metodología de Diseño:**
- **Mobile First**: Diseño pensado primero para móviles
- **CSS Grid**: Para layouts complejos
- **Flexbox**: Para alineación y distribución
- **Media Queries**: Para responsividad

### 4.2 Sistem de Colores Mantenido

#### **Paleta de colores del proyecto:**
```css
:root {
    --color-primario: #FF6B6B;    /* Rosa principal */
    --color-secundario: #4ECDC4;  /* Verde agua */
    --color-texto: #2C3E50;       /* Azul oscuro */
    --color-fondo: #F8F9FA;       /* Gris claro */
    --color-blanco: #FFFFFF;      /* Blanco */
}
```

#### **¿Por qué usar variables CSS?**
- **Consistencia**: Mismo color en toda la página
- **Mantenimiento**: Cambiar un color en un solo lugar
- **Escalabilidad**: Fácil crear temas alternativos

### 4.3 Layouts Responsivos Implementados

#### **CSS Grid para servicios:**
```css
.servicios-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    padding: 2rem;
}

/* Responsivo automático */
@media (max-width: 768px) {
    .servicios-grid {
        grid-template-columns: 1fr;
        padding: 1rem;
    }
}
```

#### **¿Qué logra este código?**
- **Responsive automático**: Se adapta al tamaño de pantalla
- **Flexibilidad**: Columnas se ajustan según el espacio
- **Consistencia**: Espaciado uniforme entre elementos

### 4.4 Efectos Visuales Agregados

#### **Hover effects:**
```css
.servicio-item {
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.servicio-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.15);
}
```

#### **¿Por qué estos efectos?**
- **Interactividad**: La página se siente más dinámica
- **Feedback visual**: El usuario sabe que puede interactuar
- **Profesionalismo**: Detalles que marcan la diferencia

---

## 5. DESARROLLO JAVASCRIPT - FUNCIONALIDAD

### 5.1 Conceptos JavaScript Aplicados

#### **Funcionalidades implementadas:**
- **Navegación móvil**: Menú hamburguesa
- **Carousels**: Rotación automática de imágenes
- **Smooth scrolling**: Desplazamiento suave
- **Lazy loading**: Carga optimizada de imágenes

### 5.2 Código del Menú Móvil

```javascript
// Toggle del menú móvil
const menuToggle = document.querySelector('.menu-toggle');
const navMenu = document.querySelector('.nav-menu');

menuToggle.addEventListener('click', () => {
    navMenu.classList.toggle('active');
});

// Cerrar menú al hacer click en un enlace
document.querySelectorAll('.nav-menu a').forEach(link => {
    link.addEventListener('click', () => {
        navMenu.classList.remove('active');
    });
});
```

#### **¿Qué hace este código?**
1. **Selecciona elementos**: Encuentra el botón y el menú
2. **Agrega evento**: Escucha cuando se hace click
3. **Cambia clases**: Muestra/oculta el menú
4. **Mejora UX**: Cierra automáticamente al navegar

### 5.3 Carousel Automático

```javascript
// Carousel automático
let currentSlide = 0;
const slides = document.querySelectorAll('.carousel-slide');

function nextSlide() {
    slides[currentSlide].classList.remove('active');
    currentSlide = (currentSlide + 1) % slides.length;
    slides[currentSlide].classList.add('active');
}

// Cambiar slide cada 5 segundos
setInterval(nextSlide, 5000);
```

#### **¿Cómo funciona?**
1. **Variables**: Controla qué slide está activo
2. **Función**: Cambia al siguiente slide
3. **Timer**: Ejecuta automáticamente cada 5 segundos
4. **Loop**: Vuelve al primer slide al final

---

## 6. INTEGRACIÓN DE SERVICIOS

### 6.1 Proceso de Integración

#### **Paso 1: Análisis del contenido original**
- Se analizó el archivo Wix original
- Se extrajeron textos exactos
- Se identificaron URLs de videos
- Se mantuvo la estructura visual

#### **Paso 2: Extracción de videos**
```bash
# Búsqueda de videos en el archivo Wix
grep -n "video.*wixstatic" archivo_original.html
```

#### **Resultados encontrados:**
- 5 videos profesionales
- URLs en formato .mp4
- Múltiples calidades disponibles
- Hosting en Wix static

#### **Paso 3: Integración en HTML**
```html
<video autoplay muted loop>
    <source src="https://video.wixstatic.com/video/ID_VIDEO/480p/mp4/file.mp4" type="video/mp4">
    <div class="video-placeholder">
        <i class="fas fa-play-circle"></i>
        <p>Video del servicio</p>
    </div>
</video>
```

### 6.2 Optimizaciones Aplicadas

#### **Atributos de video optimizados:**
- **autoplay**: Reproduce automáticamente
- **muted**: Sin sonido (requerido para autoplay)
- **loop**: Se repite infinitamente
- **poster**: Imagen de previsualización

#### **Fallback implementado:**
- Si el video no carga, muestra un placeholder
- Icono de play como indicador visual
- Texto descriptivo del contenido

---

## 7. OPTIMIZACIÓN Y MEJORES PRÁCTICAS

### 7.1 Performance Web

#### **Optimizaciones implementadas:**
```css
/* Optimización de carga */
img {
    loading: lazy;          /* Carga perezosa */
    object-fit: cover;      /* Mantiene proporción */
    transition: transform 0.3s ease; /* Animaciones suaves */
}

video {
    preload: metadata;      /* Solo carga metadatos */
    object-fit: cover;      /* Mantiene proporción */
}
```

### 7.2 SEO Básico

#### **Meta tags implementados:**
```html
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="MalaPeluquería - Servicios profesionales de peluquería">
<title>Servicios - MalaPeluquería</title>
```

### 7.3 Accesibilidad

#### **Mejoras de accesibilidad:**
- Alt text en todas las imágenes
- Contraste adecuado de colores
- Navegación por teclado
- Estructura semántica correcta

---

## 8. PROBLEMAS ENCONTRADOS Y SOLUCIONES

### 8.1 Problema: Archivo CSS corrupto

#### **Problema:**
Al intentar crear `servicios.css` separado, el archivo se corrompía.

#### **Solución implementada:**
```html
<!-- CSS embebido en el HTML -->
<style>
    .servicios-container { /* estilos aquí */ }
</style>
```

#### **¿Por qué funcionó?**
- Evita problemas de archivos externos
- Carga más rápida (menos peticiones HTTP)
- Control total sobre los estilos

### 8.2 Problema: Extracción de videos de Wix

#### **Problema:**
Archivo Wix muy complejo con estructura anidada.

#### **Solución:**
```bash
# Búsqueda específica de patrones
grep -n "a4f25c_.*\.mp4" archivo.html
```

#### **Resultado:**
- Se encontraron todos los videos
- URLs extraídas correctamente
- Integración exitosa

---

## 9. ESTRUCTURA FINAL DEL CÓDIGO

### 9.1 Archivos HTML

#### **index.html** - Página principal
- Hero section con carousel
- Navegación actualizada
- Footer consistente

#### **productos.html** - Catálogo de productos
- Grid de productos
- Navegación actualizada
- Diseño responsivo

#### **traramientos.html** - Tratamientos disponibles
- Lista de tratamientos
- Navegación actualizada
- Información detallada

#### **servicios.html** - Servicios profesionales ⭐ NUEVO
- 5 secciones de servicios
- Videos integrados
- Contenido extraído de Wix
- Diseño consistente con el sitio

### 9.2 Archivos CSS

#### **index.css** - Estilos principales
- Variables de colores
- Layouts responsivos
- Componentes reutilizables
- Efectos y animaciones

#### **productos.css** - Estilos específicos
- Grid de productos
- Cards de producto
- Efectos hover

#### **servicios.css** - Estilos de servicios
- Layout de servicios
- Integración de videos
- Responsive design

---

## 10. CONCLUSIONES Y APRENDIZAJES

### 10.1 Lo que aprendiste en este proyecto:

#### **HTML Semántico:**
- Uso correcto de etiquetas
- Estructura lógica del contenido
- Navegación consistente
- Integración multimedia

#### **CSS Moderno:**
- CSS Grid y Flexbox
- Variables CSS
- Media queries
- Efectos y transiciones

#### **JavaScript Funcional:**
- Manipulación del DOM
- Event listeners
- Funciones automáticas
- Interactividad

#### **Workflow Profesional:**
- Estructura de archivos
- Reutilización de código
- Optimización de performance
- Integración de contenido externo

### 10.2 Habilidades desarrolladas:

✅ **Desarrollo Frontend completo**
✅ **Diseño responsive**
✅ **Integración multimedia**
✅ **Optimización web**
✅ **Resolución de problemas**
✅ **Workflow profesional**

### 10.3 Próximos pasos sugeridos:

1. **Aprende más JavaScript:** Frameworks como React o Vue
2. **Backend básico:** Node.js o PHP para formularios
3. **Gestores de versiones:** Git y GitHub
4. **Optimización avanzada:** Webpack, Sass
5. **CMS:** WordPress o Strapi para gestión de contenido

---

## 11. RECURSOS ADICIONALES

### 11.1 Documentación útil:
- [MDN Web Docs](https://developer.mozilla.org/)
- [CSS Tricks](https://css-tricks.com/)
- [W3Schools](https://www.w3schools.com/)

### 11.2 Herramientas recomendadas:
- **VS Code:** Editor de código
- **Chrome DevTools:** Debugging
- **Git:** Control de versiones
- **Figma:** Diseño UI/UX

---

**¡FELICITACIONES!** 
Has completado tu primera página web profesional con:
- 4 páginas funcionales
- Diseño responsivo
- Contenido multimedia
- Navegación profesional
- Código limpio y organizado

**Esta experiencia te ha dado las bases para seguir creciendo como desarrollador web.**

---

*Documento generado automáticamente*
*Proyecto MalaMale - Octubre 2025*